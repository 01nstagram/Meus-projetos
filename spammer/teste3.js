require('dotenv').config(); // Carregar vari√°veis de ambiente do .env
const { 
    Client, 
    GatewayIntentBits, 
    ButtonBuilder, 
    ActionRowBuilder, 
    ButtonStyle, 
    MessageFlags, 
    REST, 
    Routes, 
    SlashCommandBuilder, 
    Collection 
} = require('discord.js');

const { token, clientId } = process.env;  

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.DirectMessages
    ],
});

client.commands = new Collection();

// üîÑ Defini√ß√£o dos comandos Slash
const commands = [
    new SlashCommandBuilder()
        .setName('spam')
        .setDescription('...'),

    new SlashCommandBuilder()
        .setName('chkspam')
        .setDescription('...')
].map(command => command.toJSON());

// üîÑ Atualizar comandos automaticamente ao iniciar
const rest = new REST({ version: '10' }).setToken(token);

(async () => {
    try {
        console.log('üîÑ Atualizando comandos globais...');
        await rest.put(Routes.applicationCommands(clientId), { body: commands });
        console.log('‚úÖ Comandos atualizados com sucesso!');
    } catch (error) {
        console.error('‚ùå Erro ao atualizar comandos:', error);
    }
})();

// üîÑ Evento quando o bot ficar online
client.once('ready', () => {
    console.log('‚úÖ Bot est√° online!');
});

// ‚úÖ Fun√ß√£o segura para enviar mensagens (evita que o bot trave)
const sendMessage = async (interaction, msg, isEphemeral = false) => {
    try {
        await interaction.followUp({
            content: msg,
            flags: isEphemeral ? MessageFlags.Ephemeral : undefined
        });
    } catch (error) {
        console.error(`‚ùå Erro ao enviar mensagem: ${error.message}`);
    }
};

// üìú Comando /spam
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand()) return;

    // Defere a resposta para garantir que o bot n√£o trave
    await interaction.deferReply();

    if (interaction.commandName === 'spam') {
        const button = new ButtonBuilder()
            .setCustomId('spamButton')
            .setLabel('SPAMMER üáµüá∞')
            .setStyle(ButtonStyle.Primary);

        const row = new ActionRowBuilder().addComponents(button);

        await interaction.followUp({
            content: 'ADM DORMIU SPAM SUBIU',
            components: [row],
            flags: MessageFlags.Ephemeral
        });
    }

    if (interaction.commandName === 'chkspam') {
        // Verifica se a intera√ß√£o √© em um canal de texto e se o canal √© v√°lido
        const channel = interaction.channel;
        if (!channel || channel.type !== 'GUILD_TEXT') {
            return await sendMessage(interaction, 'GG', true);
        }

        await sendMessage(interaction, `GG`, true);
    }
});

// üìú Manipula√ß√£o dos bot√µes
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'spamButton') {
        await interaction.deferUpdate();

        // Configura√ß√£o do spam
        const totalMessages = 10;

        await sendMessage(interaction, 'Iniciando spam...', true);

        for (let i = 0; i < totalMessages; i++) {
            await sendMessage(interaction, `
# –ü–ê–ö–ò–°–¢–ê–ù –ù–ê –í–ï–†–•–£
# ||PAKISTAN N√ÉO TA PURO||
# NOS NO TOPO O RESTO √â RANDOM
# https://discord.gg/7CadnxeryD
# @here @everyone
`);
        }

        await sendMessage(interaction, 'O spam foi finalizado!', true);
    }
});

// üîë Logando o bot
client.login(token);
